name    = JIRA-REST-Class
author  = Packy Anderson <packy@cpan.org>
copyright_holder = Packy Anderson
license = Artistic_2_0
main_module = lib/JIRA/REST/Class.pm

[MetaResources]
homepage          = http://blogs.perl.org/users/packy_anderson/2016/12/jira-rest-class.html
bugtracker.web    = https://rt.cpan.org/Public/Dist/Display.html?Name=JIRA-REST-Class
bugtracker.mailto = bug-JIRA-REST-Class@rt.cpan.org
repository.url    = https://github.com/packy/JIRA-REST-Class.git
repository.web    = https://github.com/packy/JIRA-REST-Class
repository.type   = git

; choose files to include
[Git::GatherDir]    ; everything from git ls-files
exclude_filename = Makefile
exclude_match = ^pod/.+

[Git::NextVersion]
[RewriteVersion]
skip_version_provider = true
[BumpVersionAfterRelease]
[NextRelease]
[Templates]
templates = :InstallModules
[PodWeaver]
replacer = replace_with_comment
post_code_replacer = replace_with_nothing
[Comment]
[MetaProvides::Package]

[@Git]

[PruneCruft]        ; default stuff to skip
[PruneFiles]
match = ^html/.+
match = ^../html/.+
;[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[InsertCopyright]    ; add copyright at "# COPYRIGHT"

; generated files
[License]           ; boilerplate license
[Pod2Readme]        ; from Pod (runs after PodWeaver)

; t tests
[Test::ReportPrereqs]   ; show prereqs in automated test output
[Test::Inline]

; xt tests
[Test::MinimumVersion]  ; xt/release/minimum-version.t
max_target_perl = 5.010 ; do not use syntax/features past 5.10
[Test::PodSpelling]     ; xt/author/pod-spell.t

[Test::Perl::Critic]    ; xt/author/critic.t
critic_config = testcritic.rc
[MetaTests]             ; xt/release/meta-yaml.t
[PodSyntaxTests]        ; xt/release/pod-syntax.t
[PodCoverageTests]      ; xt/release/pod-coverage.t
[Test::Portability]     ; xt/release/portability.t (of file name)
options = test_one_dot = 0
[Test::Version]         ; xt/release/test-version.t
filename_match = qr{lib/JIRA/REST/Class/Version.pm}
[Test::Compile]         ; xt/author/00-compile.t
fake_home = 1           ; fakes $ENV{HOME} just in case
xt_mode = 1             ; make sure all files compile

; metadata
[AutoPrereqs]   ; find prereqs from code
[Prereqs]
Data::Dumper::Concise = 0

[MinimumPerl]   ; determine minimum perl version

[Prereqs::AuthorDeps]   ; add authordeps as develop/requires
[MetaYAML]              ; generate META.yml (v1.4)
[MetaJSON]              ; generate META.json (v2)
[CPANFile]              ; generate cpanfile

; manifest (after all generated files)
[Manifest]          ; create MANIFEST

; before release

[PromptIfStale]     ; check if our build tools are out of date
module = Dist::Zilla
module = Dist::Zilla::PluginBundle::DAGOLDEN
check_all_plugins = 1

[Git::CheckFor::CorrectBranch] ; ensure on master branch

[Git::Check]        ; ensure all files checked in
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = cpanfile

[ContributorsFromGit]
;[ChangelogFromGit]

[CheckMetaResources]     ; ensure META has 'resources' data
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated

[RemovePrereqs]
remove = base      ; these are perl pagmas,
remove = constant  ; not modules!
remove = lib
remove = overload
remove = strict
remove = utf8
remove = warnings

remove = Win32           ; I'm going to assume that any Win32 system will
remove = Win32::Process  ; already have these, so they don't break unix builds

[RunExtraTests]   ; ensure xt/ tests pass

[TestRelease]     ; ensure t/ tests pass

[MakeMaker]

; release process
[UploadToCPAN]
[Git::CommitBuild]
; set explicitly to an empty string to cause no build contents checkin
branch =
; create branches only on releases
release_branch = releases/%b
release_message = Build results for v%v (%h on %b)

; plugins for Pod::Weaver, which don't get picked up by authordeps!
; authordep Pod::Weaver::Plugin::StopWords
; authordep Pod::Weaver::Plugin::SingleEncoding
; authordep Pod::Weaver::Section::Contributors
; plugins for Perl::Critic also don't get picked up
; authordep Perl::Critic::Tics
; authordep Perl::Critic::Policy::References::ProhibitComplexDoubleSigils
; authordep Perl::Critic::RENEEB
